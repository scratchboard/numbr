{"version":3,"sources":["models/Numbers.js","App.js","serviceWorker.js","index.js"],"names":["modes","comma","csv","headerless_csv","space","json","newline","Numbers","types","model","code","optional","string","code_enabled","boolean","basic","content","mode","integer","actions","self","enableCode","enable","setCode","setBasic","setMode","setContent","views","numbers","length","Set","replace","split","filter","char","test","join","trim","number","map","substr","JSON","stringify","inject","observer","props","state","useLocalStore","filename","ext","className","Container","Row","Col","Form","Group","Label","Control","value","as","rows","onChange","ev","target","InputGroup","Prepend","Checkbox","checked","type","parseInt","Object","keys","key","Badge","variant","count","Button","size","onClick","copy","copyable","Append","Text","download","style","wordWrap","whiteSpace","Boolean","window","location","hostname","match","initial","create","makeNumbers","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f214741.chunk.js","sourcesContent":["import { types } from 'mobx-state-tree';\n\nconst COMMA_MODE = 0;\nconst CSV_MODE = 1;\nconst HEADERLESS_CSV_MODE = 2;\nconst SPACE_MODE = 3;\nconst NEWLINE_MODE = 4;\nconst JSON_MODE = 5;\n\nexport const modes = {\n    comma: COMMA_MODE,\n    csv: CSV_MODE,\n    headerless_csv: HEADERLESS_CSV_MODE,\n    space: SPACE_MODE,\n    json: JSON_MODE,\n    newline: NEWLINE_MODE\n};\n\nconst Numbers = types.model({\n    \n    code: types.optional(types.string, '+880'),\n    code_enabled: types.optional(types.boolean, true),\n    basic: types.optional(types.string, '1843129105'),\n    content: types.optional(types.string, ''),\n    mode: types.optional(types.integer, 0)\n\n}).actions(self => ({\n    enableCode(enable) {\n        self.code_enabled = !!enable;\n    },\n\n    setCode(code) {\n        self.code = code;\n    },\n\n    setBasic(basic) {\n        self.basic = basic; \n    },\n\n    setMode(mode) {\n        self.mode = mode;\n    },\n\n    setContent(content) {\n        self.content = content;\n    }\n})).views(self => ({\n    get count() {\n        return self.numbers.length;\n    },\n\n    get numbers() {\n        return [\n            ...new Set(\n                self.content\n                .replace(/[\\n\\r]/mgi, ' ')\n                .split('')\n                .filter(char => /^[\\d\\s]$/i.test(char))\n                .join('')\n                .replace(/\\s+/, ' ')\n                .trim()\n                .split(' ')\n                .filter(number => number.length >= self.basic.length)\n                .map(number => self.code + number.substr(-1 * self.basic.length))\n            )\n        ];\n    },\n\n    get copyable() {\n        if (self.mode === COMMA_MODE) {\n            return self.numbers.join(', ');\n\n        } else if (self.mode === CSV_MODE) {\n            return 'numbers\\n' + self.numbers.join('\\n');\n\n        } else if (self.mode === HEADERLESS_CSV_MODE || self.mode === NEWLINE_MODE) {\n            return self.numbers.join('\\n');\n\n        } else if (self.mode === SPACE_MODE) {\n            return self.numbers.join(' ')\n\n        }\n\n        return JSON.stringify(self.numbers, null, 2);\n    }\n}));\n\nexport default function makeNumbers(initial = {}) {\n    return Numbers.create(initial);\n}","import React from 'react';\nimport {Row, Col, Container, Form, InputGroup, Button, Badge} from 'react-bootstrap';\nimport { observer, inject, useLocalStore } from 'mobx-react';\nimport { modes } from './models/Numbers';\nimport copy from 'copy-to-clipboard';\nimport download from 'downloadjs';\n\n\nfunction App(props) {\n  const {numbers} = props;\n\n  const state = useLocalStore(\n    self => ({\n      filename: 'numbers'\n    })\n  );\n\n  const ext = ((mode) => {\n    if (mode === modes.comma || mode === modes.space || mode === modes.newline) {\n      return '.txt';\n    } else if (mode === modes.json) {\n      return '.json';\n    } else if (mode === modes.csv || mode === modes.headerless_csv) {\n      return '.csv';\n    }\n  })(numbers.mode);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row className=\"my-3\">\n          <Col>\n            <h1 className=\"h2\">Numbr PreProcessor</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Form.Group>\n              <Form.Label>Numbers</Form.Label>\n              <Form.Control value={numbers.content} as=\"textarea\" rows={12} onChange={ev => numbers.setContent(ev.target.value)}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Code</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Checkbox checked={numbers.code_enabled} onChange={ev => numbers.enableCode(ev.target.checked)}/>\n                </InputGroup.Prepend>\n                <Form.Control type=\"text\" value={numbers.code} onChange={ev => numbers.setCode(ev.target.value)}/>\n              </InputGroup>\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Basic Number</Form.Label>\n              <Form.Control type=\"text\" value={numbers.basic} onChange={ev => numbers.setBasic(ev.target.value)}/>\n            </Form.Group>\n          </Col>\n          <Col>\n            <Form.Group>\n              <Form.Label>Mode</Form.Label>\n              <Form.Control as=\"select\" value={numbers.mode} onChange={ev => numbers.setMode(parseInt(ev.target.value))}>\n                {\n                  Object.keys(modes).map(mode => (\n                    <option value={modes[mode]} key={mode}>{mode}</option>\n                  ))\n                }\n              </Form.Control>\n            </Form.Group>\n            <Row>\n              <Col>\n                <Badge variant=\"primary mr-3\">{numbers.count} unique</Badge>\n                <Button variant=\"outline-secondary\" size=\"sm\" onClick={() => copy(numbers.copyable)}>COPY</Button>\n              </Col>\n              <Col>\n                <Form.Group>\n                  <InputGroup size=\"sm\">\n                    <Form.Control value={state.filename} onChange={ev => state.filename = ev.target.value} type=\"text\" size=\"sm\"/>\n                    <InputGroup.Append>\n                      <InputGroup.Text size=\"sm\">\n                        {ext}\n                      </InputGroup.Text>\n                    </InputGroup.Append>\n                    <InputGroup.Append>\n                      <Button\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        onClick={() => download(numbers.copyable, `${state.filename}${ext}`, 'text/plain')}>\n                        DOWNLOAD\n                      </Button>\n                    </InputGroup.Append>\n                  </InputGroup>\n                </Form.Group>\n              </Col>\n            </Row>\n            <pre className=\"my-3\" style={{wordWrap: 'break-word', whiteSpace: 'pre-wrap'}}>\n              {numbers.copyable}\n            </pre>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default inject('numbers')(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport makeNumbers from './models/Numbers';\n\nconst numbers = makeNumbers();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider numbers={numbers}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}